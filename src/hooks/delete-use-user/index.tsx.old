import * as React from 'react';
import { ObservableResource, useObservableSuspense } from 'observable-hooks';
import { from, combineLatest } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import DatabaseService from '@wcpos/common/src/database';

// function useUserDB() {
// 	const resource = React.useMemo(() => {
// 		const observableResource = new ObservableResource(
// 			from(DatabaseService.getUserDB()),
// 			(value: any) => !!value
// 		);
// 		return observableResource;
// 	}, []);

// 	return useObservableSuspense(resource);
// }

const userDB$ = from(DatabaseService.getUserDB());
const lastUser$ = userDB$.pipe(switchMap((userDB) => userDB.users.getLocal$('lastUser')));

const user$ = combineLatest([userDB$, lastUser$]).pipe(
	// @ts-ignore
	switchMap(([userDB, lastUser]) => {
		if (lastUser) {
			return from(userDB.users.findOne(lastUser.get('id')).exec());
		}
		// create default entry
		return false;
	}),
	tap((res) => {
		debugger;
	})
);

const observableResource = new ObservableResource(user$, (value: any) => !!value);

function useUser() {
	console.log('render');

	// const resource = React.useMemo(() => {
	// 	const userDB$ = from(DatabaseService.getUserDB());
	// 	const lastUser$ = userDB$.pipe(switchMap((userDB) => userDB.users.getLocal$('lastUser')));
	// 	console.log('render memo');

	// 	const user$ = combineLatest([userDB$, lastUser$]).pipe(
	// 		// @ts-ignore
	// 		switchMap(([userDB, lastUser]) => {
	// 			if (lastUser) {
	// 				return from(userDB.users.findOne(lastUser.get('id')).exec());
	// 			}
	// 			// create default entry
	// 			return false;
	// 		}),
	// 		tap((res) => {
	// 			debugger;
	// 		})
	// 	);

	// 	const observableResource = new ObservableResource(user$, (value: any) => !!value);
	// 	return observableResource;
	// }, []);

	return useObservableSuspense(observableResource);
}

export default useUser;
